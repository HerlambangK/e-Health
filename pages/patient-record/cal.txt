<template>
  <div
    class="md:ml-72 pb-10 flex-grow items-center justify-center bg-white rounded-md shadow-md px-4 border mx-11"
  >
    <div>
      <FullCalendar
        :plugins="calendarPlugins"
        :headerToolbar="calendarHeaderToolbar"
        :allDaySlot="false"
        initialView="timeGridWeek"
        :slotDuration="'01:00:00'"
        :editable="true"
        :selectable="true"
        :selectMirror="true"
        :dayMaxEvents="true"
        :weekends="true"
        :nowIndicator="true"
        :initialEvents="currentEvents"
        @eventsSet="handleEvents"
        @select="handleDateSelect"
        @eventClick="handleEventClick"
      />
    </div>
  </div>
</template>

<script setup>
import { ref } from "vue";
import FullCalendar from "@fullcalendar/vue3";
import dayGridPlugin from "@fullcalendar/daygrid";
import interactionPlugin from "@fullcalendar/interaction";
import timeGridPlugin from "@fullcalendar/timegrid";
import moment from "moment";

let eventGuid = 0;
let todayStr = moment().format("YYYY-MM-DD");
const createEventId = () => String(eventGuid++);

const INITIAL_EVENTS = [
  { id: 1, title: "Lunch Pary", start: todayStr + "T09:00:00" },
  {
    id: createEventId(),
    title: "Timed event",
    start: moment(todayStr).add(1, "days").format("YYYY-MM-DD") + "T16:00:00",
  },
  {
    id: createEventId(),
    title: "Head Meetup",
    start: moment(todayStr).add(2, "days").format("YYYY-MM-DD") + "T20:00:00",
  },
  {
    id: createEventId(),
    title: "VC Meeting",
    start: moment(todayStr).add(3, "days").format("YYYY-MM-DD") + "T09:00:00",
  },
  {
    id: createEventId(),
    title: "Payment Shedules",
    start: moment(todayStr).add(5, "days").format("YYYY-MM-DD") + "T13:00:00",
  },
  {
    id: createEventId(),
    title: "VC Meeting",
    start: moment(todayStr).add(6, "days").format("YYYY-MM-DD") + "T13:00:00",
  },
];

const currentEvents = ref(INITIAL_EVENTS);

const calendarPlugins = [dayGridPlugin, interactionPlugin, timeGridPlugin];

const calendarHeaderToolbar = {
  left: "prev,next today",
  center: "title",
  right: "dayGridMonth,timeGridWeek,timeGridDay",
};

const handleEvents = async (events) => {
  await Promise.resolve((currentEvents.value = events));
};

const handleDateSelect = (selectInfo) => {
  const title = prompt("Please enter a title for the event");
  const calendarApi = selectInfo.view.calendar;
  calendarApi.unselect();

  if (title) {
    calendarApi.addEvent({
      id: createEventId(),
      title,
      start: selectInfo.start,
      end: selectInfo.end,
      allDay: selectInfo.allDay,
    });
  }
};

const handleEventClick = (clickInfo) => {
  if (confirm("Are you sure you want to delete this event?")) {
    clickInfo.event.remove();
  }
};
</script>

<style scoped>
/* Add your CSS styles here */
/* .popup {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  padding: 20px;
  background-color: white;
  border: 1px solid #ccc;
  z-index: 1000;
} */
</style>
